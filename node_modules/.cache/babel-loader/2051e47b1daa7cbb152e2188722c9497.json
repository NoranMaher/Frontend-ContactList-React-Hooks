{"ast":null,"code":"var _jsxFileName = \"/home/nouran/Work/my-app/src/contacts/ContactsList.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport Card from \"../components/Card\";\nimport { ContactsContext } from \"../context/index\";\n\nconst ContactList = () => {\n  const {\n    contacts,\n    setContacts\n  } = useContext(ContactsContext);\n  const [uniqueLetters, setUniqueLetters] = useState([]);\n  const [fetchedContacts, setFetchedContacts] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n  const [loading, SetLoading] = useState(false);\n\n  const handleFilter = event => {\n    const selectedLetter = event.currentTarget.innerText;\n    var selectedContacts = contacts.data.filter(function (contactItem) {\n      return contactItem.fullName.charAt(0) == selectedLetter;\n    });\n    setContacts(selectedContacts);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contact-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, contacts ? Array.from(new Set(contacts.data.map(name => name.fullName.charAt(0)))).map((letter, i) => /*#__PURE__*/React.createElement(\"li\", {\n    key: i,\n    onClick: handleFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 15\n    }\n  }, letter)) : \"Loading\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"list-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, contacts ? contacts.data.map((contactItem, i) => /*#__PURE__*/React.createElement(Card, {\n    key: i,\n    userId: contactItem.id,\n    name: contactItem.fullName,\n    email: contactItem.emailAddress,\n    phone: contactItem.phoneNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 15\n    }\n  })) : \"Loading\"));\n};\n\nexport default ContactList;","map":{"version":3,"sources":["/home/nouran/Work/my-app/src/contacts/ContactsList.js"],"names":["React","useEffect","useState","useContext","axios","Card","ContactsContext","ContactList","contacts","setContacts","uniqueLetters","setUniqueLetters","fetchedContacts","setFetchedContacts","searchText","setSearchText","loading","SetLoading","handleFilter","event","selectedLetter","currentTarget","innerText","selectedContacts","data","filter","contactItem","fullName","charAt","Array","from","Set","map","name","letter","i","id","emailAddress","phoneNumber"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,eAAT,QAAgC,kBAAhC;;AACA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BN,UAAU,CAACG,eAAD,CAA5C;AACA,QAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMgB,YAAY,GAAIC,KAAD,IAAW;AAC9B,UAAMC,cAAc,GAAGD,KAAK,CAACE,aAAN,CAAoBC,SAA3C;AACA,QAAIC,gBAAgB,GAAGf,QAAQ,CAACgB,IAAT,CAAcC,MAAd,CAAqB,UAAUC,WAAV,EAAuB;AACjE,aAAOA,WAAW,CAACC,QAAZ,CAAqBC,MAArB,CAA4B,CAA5B,KAAkCR,cAAzC;AACD,KAFsB,CAAvB;AAGAX,IAAAA,WAAW,CAACc,gBAAD,CAAX;AACD,GAND;;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGf,QAAQ,GACLqB,KAAK,CAACC,IAAN,CACE,IAAIC,GAAJ,CAAQvB,QAAQ,CAACgB,IAAT,CAAcQ,GAAd,CAAmBC,IAAD,IAAUA,IAAI,CAACN,QAAL,CAAcC,MAAd,CAAqB,CAArB,CAA5B,CAAR,CADF,EAEEI,GAFF,CAEM,CAACE,MAAD,EAASC,CAAT,kBACJ;AAAI,IAAA,GAAG,EAAEA,CAAT;AAAY,IAAA,OAAO,EAAEjB,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGgB,MADH,CAHF,CADK,GAQL,SATN,CADF,eAYE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG1B,QAAQ,GACLA,QAAQ,CAACgB,IAAT,CAAcQ,GAAd,CAAkB,CAACN,WAAD,EAAcS,CAAd,kBAChB,oBAAC,IAAD;AACE,IAAA,GAAG,EAAEA,CADP;AAEE,IAAA,MAAM,EAAET,WAAW,CAACU,EAFtB;AAGE,IAAA,IAAI,EAAEV,WAAW,CAACC,QAHpB;AAIE,IAAA,KAAK,EAAED,WAAW,CAACW,YAJrB;AAKE,IAAA,KAAK,EAAEX,WAAW,CAACY,WALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADK,GAUL,SAXN,CAZF,CADF;AA4BD,CA3CD;;AA6CA,eAAe/B,WAAf","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport Card from \"../components/Card\";\nimport { ContactsContext } from \"../context/index\";\nconst ContactList = () => {\n  const { contacts, setContacts } = useContext(ContactsContext);\n  const [uniqueLetters, setUniqueLetters] = useState([]);\n  const [fetchedContacts, setFetchedContacts] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n  const [loading, SetLoading] = useState(false);\n\n  const handleFilter = (event) => {\n    const selectedLetter = event.currentTarget.innerText;\n    var selectedContacts = contacts.data.filter(function (contactItem) {\n      return contactItem.fullName.charAt(0) == selectedLetter;\n    });\n    setContacts(selectedContacts);\n  };\n\n  return (\n    <div className=\"contact-list\">\n      <ul>\n        {contacts\n          ? Array.from(\n              new Set(contacts.data.map((name) => name.fullName.charAt(0)))\n            ).map((letter, i) => (\n              <li key={i} onClick={handleFilter}>\n                {letter}\n              </li>\n            ))\n          : \"Loading\"}\n      </ul>\n      <div className=\"list-wrapper\">\n        {contacts\n          ? contacts.data.map((contactItem, i) => (\n              <Card\n                key={i}\n                userId={contactItem.id}\n                name={contactItem.fullName}\n                email={contactItem.emailAddress}\n                phone={contactItem.phoneNumber}\n              ></Card>\n            ))\n          : \"Loading\"}\n      </div>\n    </div>\n  );\n};\n\nexport default ContactList;\n"]},"metadata":{},"sourceType":"module"}