{"ast":null,"code":"var _jsxFileName = \"/home/nouran/Work/my-app/src/context/GlobalState.js\";\nimport React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport axios from \"axios\";\n\nconst fetchData = () => {\n  axios.get(\"./contacts.json\").then(response => {\n    const data = response.data.data;\n    return data;\n  });\n};\n\nconst initialState = {\n  contacts: []\n}; // Create Context\n\nexport const GlobalContext = createContext(initialState); // Provider Component\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState); // Actions\n\n  const get = async () => {\n    const response = await axios.get(\"./contacts.json\");\n    dispatch({\n      type: \"getContacts\",\n      data: response.data\n    });\n  };\n\n  const removeContact = id => {\n    dispatch({\n      type: \"REMOVE_CONTACT\",\n      payload: id\n    });\n  };\n\n  const addContact = contact => {\n    dispatch({\n      type: \"ADD_CONTACT\",\n      payload: contact\n    });\n  };\n\n  const editContact = contact => {\n    dispatch({\n      type: \"EDIT_CONTACT\",\n      payload: contact\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(GlobalContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      getContacts,\n      removeContact,\n      addContact,\n      editContact\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["/home/nouran/Work/my-app/src/context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","axios","fetchData","get","then","response","data","initialState","contacts","GlobalContext","GlobalProvider","children","state","dispatch","type","removeContact","id","payload","addContact","contact","editContact","getContacts"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtBD,EAAAA,KAAK,CAACE,GAAN,CAAU,iBAAV,EAA6BC,IAA7B,CAAmCC,QAAD,IAAc;AAC9C,UAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAT,CAAcA,IAA3B;AACA,WAAOA,IAAP;AACD,GAHD;AAID,CALD;;AAOA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AADS,CAArB,C,CAIA;;AACA,OAAO,MAAMC,aAAa,GAAGX,aAAa,CAACS,YAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMG,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC9C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,UAAU,CAACC,UAAD,EAAaO,YAAb,CAApC,CAD8C,CAG9C;;AAEA,QAAMJ,GAAG,GAAG,YAAY;AACtB,UAAME,QAAQ,GAAG,MAAMJ,KAAK,CAACE,GAAN,CAAU,iBAAV,CAAvB;AACAU,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,aAAR;AAAuBR,MAAAA,IAAI,EAAED,QAAQ,CAACC;AAAtC,KAAD,CAAR;AACD,GAHD;;AAKA,QAAMS,aAAa,GAAIC,EAAD,IAAQ;AAC5BH,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE,gBADC;AAEPG,MAAAA,OAAO,EAAED;AAFF,KAAD,CAAR;AAID,GALD;;AAOA,QAAME,UAAU,GAAIC,OAAD,IAAa;AAC9BN,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE,aADC;AAEPG,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAID,GALD;;AAOA,QAAMC,WAAW,GAAID,OAAD,IAAa;AAC/BN,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE,cADC;AAEPG,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAID,GALD;;AAMA,sBACE,oBAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLX,MAAAA,QAAQ,EAAEI,KAAK,CAACJ,QADX;AAELa,MAAAA,WAFK;AAGLN,MAAAA,aAHK;AAILG,MAAAA,UAJK;AAKLE,MAAAA;AALK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGT,QATH,CADF;AAaD,CA3CM","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport axios from \"axios\";\n\nconst fetchData = () => {\n  axios.get(\"./contacts.json\").then((response) => {\n    const data = response.data.data;\n    return data;\n  });\n};\n\nconst initialState = {\n  contacts: [],\n};\n\n// Create Context\nexport const GlobalContext = createContext(initialState);\n\n// Provider Component\nexport const GlobalProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  // Actions\n\n  const get = async () => {\n    const response = await axios.get(\"./contacts.json\");\n    dispatch({ type: \"getContacts\", data: response.data });\n  };\n\n  const removeContact = (id) => {\n    dispatch({\n      type: \"REMOVE_CONTACT\",\n      payload: id,\n    });\n  };\n\n  const addContact = (contact) => {\n    dispatch({\n      type: \"ADD_CONTACT\",\n      payload: contact,\n    });\n  };\n\n  const editContact = (contact) => {\n    dispatch({\n      type: \"EDIT_CONTACT\",\n      payload: contact,\n    });\n  };\n  return (\n    <GlobalContext.Provider\n      value={{\n        contacts: state.contacts,\n        getContacts,\n        removeContact,\n        addContact,\n        editContact,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}