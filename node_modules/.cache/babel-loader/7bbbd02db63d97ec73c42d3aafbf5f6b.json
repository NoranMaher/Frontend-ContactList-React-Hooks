{"ast":null,"code":"var _jsxFileName = \"/home/nouran/Work/my-app/src/contacts/ContactsList.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport Card from \"../components/Card\"; // import { ContactsContext } from \"../context/index\";\n\nimport { GlobalContext } from \"../context/GlobalState\";\n\nconst ContactList = () => {\n  const [uniqueLetters, setUniqueLetters] = useState([]);\n  const [fetchedContacts, setFetchedContacts] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n  const [loading, SetLoading] = useState(false);\n  const {\n    contacts,\n    search\n  } = useContext(GlobalContext);\n  useEffect(() => {\n    if (!contacts) return;\n\n    if (contacts.data) {\n      const contactList = contacts.data;\n      setFetchedContacts(contactList);\n    } else {\n      const contactList = contacts;\n      setFetchedContacts(contactList);\n    }\n\n    setUniqueLetters(Array.from(new Set(fetchedContacts.map(name => name.fullName.charAt(0)))));\n  }, [contacts]);\n  useEffect(() => {\n    if (!contacts) return;\n\n    if (contacts.data) {\n      let contactList = contacts.data;\n      let selectedContacts = contactList.filter(function (contactItem) {\n        return contactItem.fullName.toLowerCase().includes(search);\n      });\n      setFetchedContacts(selectedContacts);\n    } else {\n      let contactList = contacts;\n      let selectedContacts = contactList.filter(function (contactItem) {\n        return contactItem.fullName.toLowerCase().includes(search);\n      });\n      setFetchedContacts(selectedContacts);\n    }\n  }, [search]);\n\n  const handleFilter = event => {\n    const selectedLetter = event.currentTarget.innerText;\n    var selectedContacts = contacts.filter(function (contactItem) {\n      return contactItem.fullName.charAt(0) == selectedLetter;\n    });\n    setFetchedContacts(selectedContacts);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contact-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"list-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, fetchedContacts ? fetchedContacts.map((contactItem, i) => /*#__PURE__*/React.createElement(Card, {\n    key: i,\n    userId: contactItem.id,\n    name: contactItem.fullName,\n    email: contactItem.emailAddress,\n    phone: contactItem.phoneNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  })) : \"Loading\"));\n};\n\nexport default ContactList;","map":{"version":3,"sources":["/home/nouran/Work/my-app/src/contacts/ContactsList.js"],"names":["React","useEffect","useState","useContext","Card","GlobalContext","ContactList","uniqueLetters","setUniqueLetters","fetchedContacts","setFetchedContacts","searchText","setSearchText","loading","SetLoading","contacts","search","data","contactList","Array","from","Set","map","name","fullName","charAt","selectedContacts","filter","contactItem","toLowerCase","includes","handleFilter","event","selectedLetter","currentTarget","innerText","i","id","emailAddress","phoneNumber"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport Card from \"../components/Card\";\n// import { ContactsContext } from \"../context/index\";\nimport { GlobalContext } from \"../context/GlobalState\";\n\nconst ContactList = () => {\n  const [uniqueLetters, setUniqueLetters] = useState([]);\n  const [fetchedContacts, setFetchedContacts] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n  const [loading, SetLoading] = useState(false);\n\n  const { contacts, search } = useContext(GlobalContext);\n\n  useEffect(() => {\n    if (!contacts) return;\n    if (contacts.data) {\n      const contactList = contacts.data;\n      setFetchedContacts(contactList);\n    } else {\n      const contactList = contacts;\n      setFetchedContacts(contactList);\n    }\n    setUniqueLetters(\n      Array.from(\n        new Set(fetchedContacts.map((name) => name.fullName.charAt(0)))\n      )\n    );\n  }, [contacts]);\n\n  useEffect(() => {\n    if (!contacts) return;\n    if (contacts.data) {\n      let contactList = contacts.data;\n      let selectedContacts = contactList.filter(function (contactItem) {\n        return contactItem.fullName.toLowerCase().includes(search);\n      });\n      setFetchedContacts(selectedContacts);\n    } else {\n      let contactList = contacts;\n      let selectedContacts = contactList.filter(function (contactItem) {\n        return contactItem.fullName.toLowerCase().includes(search);\n      });\n      setFetchedContacts(selectedContacts);\n    }\n  }, [search]);\n\n  const handleFilter = (event) => {\n    const selectedLetter = event.currentTarget.innerText;\n    var selectedContacts = contacts.filter(function (contactItem) {\n      return contactItem.fullName.charAt(0) == selectedLetter;\n    });\n    setFetchedContacts(selectedContacts);\n  };\n\n  return (\n    <div className=\"contact-list\">\n      {/* <ul>\n        {contacts\n          ? uniqueLetters.map((letter, i) => <li key={i}>{letter}</li>)\n          : \"Loading\"}\n      </ul> */}\n      <div className=\"list-wrapper\">\n        {fetchedContacts\n          ? fetchedContacts.map((contactItem, i) => (\n              <Card\n                key={i}\n                userId={contactItem.id}\n                name={contactItem.fullName}\n                email={contactItem.emailAddress}\n                phone={contactItem.phoneNumber}\n              ></Card>\n            ))\n          : \"Loading\"}\n      </div>\n    </div>\n  );\n};\n\nexport default ContactList;\n"]},"metadata":{},"sourceType":"module"}