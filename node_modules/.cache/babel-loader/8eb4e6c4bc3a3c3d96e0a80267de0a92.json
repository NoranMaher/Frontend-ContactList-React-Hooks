{"ast":null,"code":"var _jsxFileName = \"/home/nouran/Work/my-app/src/contacts/ContactsList.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport Card from \"../components/Card\";\nimport { ContactsContext } from \"../context/index\";\nimport { contains } from \"jquery\";\n\nconst ContactList = () => {\n  const {\n    contacts,\n    search\n  } = useContext(ContactsContext);\n  const [uniqueLetters, setUniqueLetters] = useState([]);\n  const [fetchedContacts, setFetchedContacts] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n  const [loading, SetLoading] = useState(false);\n  useEffect(() => {\n    if (!contacts) return;\n    let contactList = contacts.data;\n    setFetchedContacts(contactList);\n    setUniqueLetters(Array.from(new Set(contacts.data.map(name => name.fullName.charAt(0)))));\n  }, [contacts]);\n  useEffect(() => {\n    if (!contacts) return;\n    let contactList = contacts.data;\n    console.log(search);\n    let selectedContacts = contactList.filter(function (contactItem) {\n      return contactItem.fullName.includes(search);\n    });\n    setFetchedContacts(selectedContacts);\n  }, [search]);\n\n  const handleFilter = event => {\n    const selectedLetter = event.currentTarget.innerText;\n    var selectedContacts = contacts.data.filter(function (contactItem) {\n      return contactItem.fullName.charAt(0) == selectedLetter;\n    });\n    setFetchedContacts(selectedContacts);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contact-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, search), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, contacts ? uniqueLetters.map((letter, i) => /*#__PURE__*/React.createElement(\"li\", {\n    key: i,\n    onClick: handleFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }\n  }, letter)) : \"Loading\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"list-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, fetchedContacts ? fetchedContacts.map((contactItem, i) => /*#__PURE__*/React.createElement(Card, {\n    key: i,\n    userId: contactItem.id,\n    name: contactItem.fullName,\n    email: contactItem.emailAddress,\n    phone: contactItem.phoneNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  })) : \"Loading\"));\n};\n\nexport default ContactList;","map":{"version":3,"sources":["/home/nouran/Work/my-app/src/contacts/ContactsList.js"],"names":["React","useEffect","useState","useContext","axios","Card","ContactsContext","contains","ContactList","contacts","search","uniqueLetters","setUniqueLetters","fetchedContacts","setFetchedContacts","searchText","setSearchText","loading","SetLoading","contactList","data","Array","from","Set","map","name","fullName","charAt","console","log","selectedContacts","filter","contactItem","includes","handleFilter","event","selectedLetter","currentTarget","innerText","letter","i","id","emailAddress","phoneNumber"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport axios from \"axios\";\nimport Card from \"../components/Card\";\nimport { ContactsContext } from \"../context/index\";\nimport { contains } from \"jquery\";\n\nconst ContactList = () => {\n  const { contacts, search } = useContext(ContactsContext);\n  const [uniqueLetters, setUniqueLetters] = useState([]);\n  const [fetchedContacts, setFetchedContacts] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n  const [loading, SetLoading] = useState(false);\n  useEffect(() => {\n    if (!contacts) return;\n    let contactList = contacts.data;\n    setFetchedContacts(contactList);\n    setUniqueLetters(\n      Array.from(new Set(contacts.data.map((name) => name.fullName.charAt(0))))\n    );\n  }, [contacts]);\n\n  useEffect(() => {\n    if (!contacts) return;\n    let contactList = contacts.data;\n    console.log(search);\n    let selectedContacts = contactList.filter(function (contactItem) {\n      return contactItem.fullName.includes(search);\n    });\n    setFetchedContacts(selectedContacts);\n  }, [search]);\n\n  const handleFilter = (event) => {\n    const selectedLetter = event.currentTarget.innerText;\n    var selectedContacts = contacts.data.filter(function (contactItem) {\n      return contactItem.fullName.charAt(0) == selectedLetter;\n    });\n    setFetchedContacts(selectedContacts);\n  };\n\n  return (\n    <div className=\"contact-list\">\n      <h1>{search}</h1>\n      <ul>\n        {contacts\n          ? uniqueLetters.map((letter, i) => (\n              <li key={i} onClick={handleFilter}>\n                {letter}\n              </li>\n            ))\n          : \"Loading\"}\n      </ul>\n      <div className=\"list-wrapper\">\n        {fetchedContacts\n          ? fetchedContacts.map((contactItem, i) => (\n              <Card\n                key={i}\n                userId={contactItem.id}\n                name={contactItem.fullName}\n                email={contactItem.emailAddress}\n                phone={contactItem.phoneNumber}\n              ></Card>\n            ))\n          : \"Loading\"}\n      </div>\n    </div>\n  );\n};\n\nexport default ContactList;\n"]},"metadata":{},"sourceType":"module"}