{"ast":null,"code":"var _jsxFileName = \"/home/nouran/Work/my-app/src/context/GlobalState.js\";\nimport React, { createContext, useReducer, useEffect, useState } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport axios from \"axios\";\nexport const GlobalContext = createContext(); // Provider Component\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  const [contacts, setContacts] = useState([]);\n  useEffect(() => {\n    fetchArticles();\n  }, []);\n\n  async function fetchArticles() {\n    try {\n      const content = await axios.get(\"/contacts.json\");\n      setCOntacts(content.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const [state, dispatch] = useReducer(AppReducer, initialState); // Actions\n\n  const removeContact = id => {\n    dispatch({\n      type: \"REMOVE_CONTACT\",\n      payload: id\n    });\n  };\n\n  const addContact = contact => {\n    dispatch({\n      type: \"ADD_CONTACT\",\n      payload: contact\n    });\n  };\n\n  const editContact = contact => {\n    dispatch({\n      type: \"EDIT_CONTACT\",\n      payload: contact\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(GlobalContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      removeContact,\n      addContact,\n      editContact\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["/home/nouran/Work/my-app/src/context/GlobalState.js"],"names":["React","createContext","useReducer","useEffect","useState","AppReducer","axios","GlobalContext","GlobalProvider","children","contacts","setContacts","fetchArticles","content","get","setCOntacts","data","error","console","log","state","dispatch","initialState","removeContact","id","type","payload","addContact","contact","editContact"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,EAAsDC,QAAtD,QAAsE,OAAtE;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,aAAa,GAAGN,aAAa,EAAnC,C,CAEP;;AACA,OAAO,MAAMO,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC9C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT;;AAIA,iBAAeA,aAAf,GAA+B;AAC7B,QAAI;AACF,YAAMC,OAAO,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAU,gBAAV,CAAtB;AACAC,MAAAA,WAAW,CAACF,OAAO,CAACG,IAAT,CAAX;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBnB,UAAU,CAACG,UAAD,EAAaiB,YAAb,CAApC,CAhB8C,CAiB9C;;AAEA,QAAMC,aAAa,GAAIC,EAAD,IAAQ;AAC5BH,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE,gBADC;AAEPC,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GALD;;AAOA,QAAMG,UAAU,GAAIC,OAAD,IAAa;AAC9BP,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE,aADC;AAEPC,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAID,GALD;;AAOA,QAAMC,WAAW,GAAID,OAAD,IAAa;AAC/BP,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE,cADC;AAEPC,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAID,GALD;;AAOA,sBACE,oBAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLlB,MAAAA,QAAQ,EAAEU,KAAK,CAACV,QADX;AAELa,MAAAA,aAFK;AAGLI,MAAAA,UAHK;AAILE,MAAAA;AAJK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGpB,QARH,CADF;AAYD,CApDM","sourcesContent":["import React, { createContext, useReducer, useEffect, useState } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport axios from \"axios\";\n\nexport const GlobalContext = createContext();\n\n// Provider Component\nexport const GlobalProvider = ({ children }) => {\n  const [contacts, setContacts] = useState([]);\n\n  useEffect(() => {\n    fetchArticles();\n  }, []);\n\n  async function fetchArticles() {\n    try {\n      const content = await axios.get(\"/contacts.json\");\n      setCOntacts(content.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  // Actions\n\n  const removeContact = (id) => {\n    dispatch({\n      type: \"REMOVE_CONTACT\",\n      payload: id,\n    });\n  };\n\n  const addContact = (contact) => {\n    dispatch({\n      type: \"ADD_CONTACT\",\n      payload: contact,\n    });\n  };\n\n  const editContact = (contact) => {\n    dispatch({\n      type: \"EDIT_CONTACT\",\n      payload: contact,\n    });\n  };\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        contacts: state.contacts,\n        removeContact,\n        addContact,\n        editContact,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}